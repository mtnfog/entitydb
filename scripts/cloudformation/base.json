{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS CloudFormation template for standing up an EntityDB testing stack composed of EntityDB, MongoDB, and Elasticsearch.",
	"Parameters":
	{
		"KeyName":
		{
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
		},
		"SSHLocation":
		{
			"Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
		},
		"TICKInstanceType":
		{
			"Description": "The instance type for the TICK instance.",
			"Type": "String",
			"Default": "t2.nano"
		},
		"MongoDBInstanceType":
		{
			"Description": "The instance type for the MongoDB instance.",
			"Type": "String",
			"Default": "t2.nano"
		},
		"ElasticsearchInstanceType":
		{
			"Description": "The instance type for the Elasticsearch instance.",
			"Type": "String",
			"Default": "t2.micro.elasticsearch"
		},
		"AMI":
		{
			"Description": "The AMI (must be Ubuntu).",
			"Type": "String",
			"Default": "ami-40d28157"
		}
	},
	"Resources":
	{
		"Queue":
		{
			"Type": "AWS::SQS::Queue",
			"DependsOn": "DeadLetterQueue",
			"Properties":
			{
				"RedrivePolicy":
				{
					"deadLetterTargetArn":
					{
						"Fn::GetAtt":
						[
							"DeadLetterQueue",
							"Arn"
						]
					},
					"maxReceiveCount": 2
				},
				"VisibilityTimeout": 120
			}
		},
		"DeadLetterQueue":
		{
			"Type": "AWS::SQS::Queue",
			"Properties":
			{
				"VisibilityTimeout": 120
			}
		},
		"VPC":
		{
			"Type": "AWS::EC2::VPC",
			"Properties":
			{
				"CidrBlock": "10.0.0.0/16",
				"EnableDnsHostnames": "true",
				"EnableDnsSupport": "true",
				"Tags":
				[
					{
						"Key": "Application",
						"Value":
						{
							"Ref": "AWS::StackId"
						}
					}
				]
			}
		},
		"Subnet1":
		{
			"Type": "AWS::EC2::Subnet",
			"Properties":
			{
				"VpcId":
				{
					"Ref": "VPC"
				},
				"AvailabilityZone": "us-east-1d",
				"CidrBlock": "10.0.0.0/24",
				"MapPublicIpOnLaunch": "true",
				"Tags":
				[
					{
						"Key": "Application",
						"Value":
						{
							"Ref": "AWS::StackId"
						}
					}
				]
			}
		},
		"Subnet2":
		{
			"Type": "AWS::EC2::Subnet",
			"Properties":
			{
				"VpcId":
				{
					"Ref": "VPC"
				},
				"AvailabilityZone": "us-east-1e",
				"CidrBlock": "10.0.1.0/24",
				"MapPublicIpOnLaunch": "true",
				"Tags":
				[
					{
						"Key": "Application",
						"Value":
						{
							"Ref": "AWS::StackId"
						}
					}
				]
			}
		},
		"InternetGateway":
		{
			"Type": "AWS::EC2::InternetGateway",
			"Properties":
			{
				"Tags":
				[
					{
						"Key": "Application",
						"Value":
						{
							"Ref": "AWS::StackId"
						}
					}
				]
			}
		},
		"AttachGateway":
		{
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties":
			{
				"VpcId":
				{
					"Ref": "VPC"
				},
				"InternetGatewayId":
				{
					"Ref": "InternetGateway"
				}
			}
		},
		"RouteTable":
		{
			"Type": "AWS::EC2::RouteTable",
			"Properties":
			{
				"VpcId":
				{
					"Ref": "VPC"
				},
				"Tags":
				[
					{
						"Key": "Application",
						"Value":
						{
							"Ref": "AWS::StackId"
						}
					}
				]
			}
		},
		"Route":
		{
			"Type": "AWS::EC2::Route",
			"DependsOn": "AttachGateway",
			"Properties":
			{
				"RouteTableId":
				{
					"Ref": "RouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId":
				{
					"Ref": "InternetGateway"
				}
			}
		},
		"Subnet1RouteTableAssociation":
		{
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties":
			{
				"SubnetId":
				{
					"Ref": "Subnet1"
				},
				"RouteTableId":
				{
					"Ref": "RouteTable"
				}
			}
		},
		"Subnet2RouteTableAssociation":
		{
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties":
			{
				"SubnetId":
				{
					"Ref": "Subnet2"
				},
				"RouteTableId":
				{
					"Ref": "RouteTable"
				}
			}
		},
		"ElasticsearchDomain":
		{
			"Type": "AWS::Elasticsearch::Domain",
			"Properties":
			{				
				"EBSOptions":
				{
					"EBSEnabled": "true",
					"VolumeSize": "10",
					"VolumeType": "standard"
				},
				"ElasticsearchVersion": "2.3",
				"ElasticsearchClusterConfig":
				{
					"DedicatedMasterEnabled": "false",
					"InstanceCount": "1",
					"ZoneAwarenessEnabled": "false",
					"InstanceType":
					{
						"Ref": "ElasticsearchInstanceType"
					}
				}
			}
		},
		"TickInstance":
		{
			"Type": "AWS::EC2::Instance",
			"Properties":
			{
				"AvailabilityZone": "us-east-1d",
				"KeyName":
				{
					"Ref": "KeyName"
				},
				"ImageId":
				{
					"Ref": "AMI"
				},
				"InstanceType":
				{
					"Ref": "TICKInstanceType"
				},
				"SecurityGroupIds":
				[
					{
						"Ref": "TickInstanceSecurityGroup"
					}
				],
				"PrivateIpAddress": "10.0.0.20",
				"SubnetId":
				{
					"Ref": "Subnet1"
				},
				"Tags":
				[
					{
						"Key": "Application",
						"Value":
						{
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Name",
						"Value": "TICK"
					}
				],
				"UserData":
				{
					"Fn::Base64":
					{
						"Fn::Join":
						[
							"",
							[
								"#!/bin/bash -xe\n",
								"curl -sL https://repos.influxdata.com/influxdb.key | apt-key add -\n",
								"source /etc/lsb-release\n",
								"echo \"deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable\" | tee -a /etc/apt/sources.lis\n",
								"apt-get update\n",
								"apt-get upgrade -y\n",
								"apt-get install -y ntp\n",
								"apt-get install -y influxdb\n",
								"apt-get install -y chronograf\n",
								"service influxdb start\n",
								"service chronograf start\n"
							]
						]
					}
				}
			}
		},
		"TickInstanceSecurityGroup":
		{
			"Type": "AWS::EC2::SecurityGroup",
			"Properties":
			{
				"VpcId":
				{
					"Ref": "VPC"
				},
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress":
				[
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp":
						{
							"Ref": "SSHLocation"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8083",
						"ToPort": "8083",
						"CidrIp":
						{
							"Ref": "SSHLocation"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "10000",
						"ToPort": "10000",
						"CidrIp":
						{
							"Ref": "SSHLocation"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8086",
						"ToPort": "8086",
						"SourceSecurityGroupId":
						{
							"Ref": "EntityDBSecurityGroup"
						}
					}
				]
			}
		},
		"MongoDBInstance":
		{
			"Type": "AWS::EC2::Instance",
			"Properties":
			{
				"AvailabilityZone": "us-east-1d",
				"KeyName":
				{
					"Ref": "KeyName"
				},
				"ImageId":
				{
					"Ref": "AMI"
				},
				"InstanceType":
				{
					"Ref": "MongoDBInstanceType"
				},
				"SecurityGroupIds":
				[
					{
						"Ref": "MongoDBInstanceSecurityGroup"
					}
				],
				"PrivateIpAddress": "10.0.0.10",
				"SubnetId":
				{
					"Ref": "Subnet1"
				},
				"UserData":
				{
					"Fn::Base64":
					{
						"Fn::Join":
						[
							"",
							[
								"#!/bin/bash -xe\n",
								"apt-get update\n",
								"apt-get upgrade -y\n",
								"apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\n",
								"echo \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list\n",
								"apt-get update\n",
								"apt-get install -y mongodb-org ntp\n",
								"sed -i 's/bindIp/#bindIp/g' /etc/mongod.conf\n",
								"service mongod start\n"
							]
						]
					}
				},
				"Tags":
				[
					{
						"Key": "Application",
						"Value":
						{
							"Ref": "AWS::StackId"
						}
					},
					{
						"Key": "Name",
						"Value": "MongoDB"
					}
				]
			}
		},
		"LoadBalancerSecurityGroup":
		{
			"Type": "AWS::EC2::SecurityGroup",
			"Properties":
			{
				"GroupDescription": "Enable HTTP access on port 80",
				"VpcId":
				{
					"Ref": "VPC"
				},
				"SecurityGroupIngress":
				[
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress":
				[
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"EntityDBSecurityGroup":
		{
			"Type": "AWS::EC2::SecurityGroup",
			"Properties":
			{
				"GroupDescription": "Enable HTTP access and SSH access",
				"VpcId":
				{
					"Ref": "VPC"
				},
				"SecurityGroupIngress":
				[
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"SourceSecurityGroupId":
						{
							"Ref": "LoadBalancerSecurityGroup"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp":
						{
							"Ref": "SSHLocation"
						}
					}
				]
			}
		},
		"MongoDBInstanceSecurityGroup":
		{
			"Type": "AWS::EC2::SecurityGroup",
			"Properties":
			{
				"VpcId":
				{
					"Ref": "VPC"
				},
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress":
				[
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp":
						{
							"Ref": "SSHLocation"
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "27017",
						"ToPort": "27017",
						"SourceSecurityGroupId":
						{
							"Ref": "EntityDBSecurityGroup"
						}
					}
				]
			}
		}
	},
	"Outputs":
	{
		"Elasticsearch":
		{
			"Description": "The Elasticsearch endpoint.",
			"Value":
			{
				"Fn::Join":
				[
					"",
					[
						"https://",
						{
							"Fn::GetAtt":
							[
								"ElasticsearchDomain",
								"DomainEndpoint"
							]
						}
					]
				]
			}
		},
		"QueueURL":
		{
			"Description": "The queue URL.",
			"Value":
			{
				"Ref": "Queue"
			}
		},
		"QueueARN":
		{
			"Description": "The queue ARN.",
			"Value":
			{
				"Fn::GetAtt":
				[
					"Queue",
					"Arn"
				]
			},
			"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-QueueARN" }}
		},
		"Subnet1":
		{
			"Description": "The subnet 1.",
			"Value":
			{
				"Ref": "Subnet1"
			},
			"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-Subnet1" }}
		},
		"Subnet2":
		{
			"Description": "The subnet 2.",
			"Value":
			{
				"Ref": "Subnet2"
			},
			"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-Subnet2" }}
		},
		"LoadBalancerSecurityGroup":
		{
			"Description": "The load balancer's security group.",
			"Value":
			{
				"Ref": "LoadBalancerSecurityGroup"
			},
			"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-LoadBalancerSecurityGroup" }}
		},
		"EntityDBSecurityGroup":
		{
			"Description": "The security group for the EntityDB instances.",
			"Value":
			{
				"Ref": "EntityDBSecurityGroup"
			},
			"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-EntityDBSecurityGroup" }}
		},
		"SSHLocation":
		{
			"Description": "The SSH location.",
			"Value":
			{
				"Ref": "SSHLocation"
			},
			"Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-SSHLocation" }}
		}
	}
}
